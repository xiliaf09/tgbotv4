import { SwapManager } from '../src/swapManager.js';
import { CONFIG } from '../src/config.js';
import { ethers } from 'ethers';

async function testSwapOnBase() {
  console.log('üîµ Test de swap sur Base');
  console.log('========================');
  console.log(`ü™ô Token √† vendre: ${CONFIG.TOKENS.CUSTOM_TOKEN}`);
  console.log(`üí∞ Pour acheter: 0.0001 ETH`);
  console.log(`üåê Chain: Base (${CONFIG.CHAIN_ID})`);
  console.log(`üëõ Wallet: ${CONFIG.TAKER_ADDRESS}\n`);

  try {
    // Cr√©er le gestionnaire de swap
    const swapManager = new SwapManager();

    // V√©rifier d'abord si nous avons des tokens √† vendre
    console.log('üîç V√©rification du solde du token...');
    
    let tokenBalance;
    try {
      tokenBalance = await swapManager.getTokenBalance(CONFIG.TOKENS.CUSTOM_TOKEN);
      console.log(`üíº Solde du token: ${tokenBalance} (unit√©s de base)`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible de v√©rifier le solde du token, continuons avec le test de prix...');
    }

    // √âtape 1: V√©rifier le prix pour acheter 0.0001 ETH
    console.log('\nüìä V√©rification du prix...');
    
    const buyAmountWei = ethers.parseEther('0.0001').toString(); // 0.0001 ETH en wei
    
    try {
      const priceResponse = await swapManager.zeroXApi.getPrice({
        sellToken: CONFIG.TOKENS.CUSTOM_TOKEN,
        buyToken: CONFIG.TOKENS.ETH,
        buyAmount: buyAmountWei, // Nous sp√©cifions combien nous voulons acheter
        taker: swapManager.wallet.address
      });

      console.log('‚úÖ Prix obtenu avec succ√®s!');
      console.log(`üìà Pour acheter 0.0001 ETH, vous devez vendre:`);
      console.log(`   ${priceResponse.sellAmount} unit√©s du token`);
      console.log(`‚õΩ Frais r√©seau estim√©s: ${ethers.formatEther(priceResponse.totalNetworkFee)} ETH`);
      console.log(`üìä Gas estim√©: ${priceResponse.gas}`);
      
      if (priceResponse.route) {
        console.log('üõ£Ô∏è  Route de trading:');
        priceResponse.route.fills.forEach((fill, index) => {
          console.log(`    ${index + 1}. ${fill.source} (${fill.proportionBps/100}%)`);
        });
      }

      // V√©rifier les probl√®mes potentiels
      if (priceResponse.issues) {
        console.log('\n‚ö†Ô∏è  Probl√®mes d√©tect√©s:');
        
        if (priceResponse.issues.allowance?.actual === "0") {
          console.log('   - Allowance n√©cessaire pour ce token');
        }
        
        if (priceResponse.issues.balance) {
          console.log(`   - Solde insuffisant: ${priceResponse.issues.balance.actual} (requis: ${priceResponse.sellAmount})`);
        }
        
        if (priceResponse.issues.simulationIncomplete) {
          console.log('   - Simulation incompl√®te');
        }
      }

      // Demander confirmation pour le swap r√©el
      console.log('\nüîÑ Voulez-vous effectuer ce swap r√©el? (D√©commentez la section ci-dessous)');
      
      /*
      // D√âCOMMENTEZ CETTE SECTION POUR EFFECTUER LE SWAP R√âEL
      console.log('\nüöÄ Ex√©cution du swap...');
      
      const swapResult = await swapManager.executeSwap({
        sellToken: CONFIG.TOKENS.CUSTOM_TOKEN,
        buyToken: CONFIG.TOKENS.ETH,
        buyAmount: buyAmountWei,
        slippagePercentage: '0.02' // 2% de slippage
      });

      if (swapResult.success) {
        console.log('üéâ Swap r√©ussi!');
        console.log(`üìÑ Hash: ${swapResult.transactionHash}`);
        console.log(`üèóÔ∏è  Bloc: ${swapResult.blockNumber}`);
        console.log(`‚õΩ Gas utilis√©: ${swapResult.gasUsed}`);
      } else {
        console.log('‚ùå √âchec du swap:', swapResult.error);
      }
      */

    } catch (error) {
      if (error.message.includes('INSUFFICIENT_ASSET_LIQUIDITY')) {
        console.log('‚ùå Liquidit√© insuffisante pour ce token sur 0x');
        console.log('   Ce token pourrait ne pas √™tre support√© ou avoir tr√®s peu de liquidit√©');
      } else if (error.message.includes('VALIDATION_ERROR')) {
        console.log('‚ùå Erreur de validation - v√©rifiez l\'adresse du token');
      } else {
        console.error('‚ùå Erreur:', error.message);
      }
    }

  } catch (error) {
    console.error('üí• Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cuter le test
testSwapOnBase().catch(console.error); 