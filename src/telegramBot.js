import TelegramBot from 'node-telegram-bot-api';
import { SwapManager } from './swapManager.js';
import { CONFIG } from './config.js';
import { ethers } from 'ethers';
import fetch from 'node-fetch';

export class ZeroXTelegramBot {
  constructor(telegramToken) {
    this.bot = new TelegramBot(telegramToken, { polling: true });
    this.swapManager = new SwapManager();
    
    // Liste des utilisateurs autoris√©s (ajoutez vos IDs Telegram)
    this.authorizedUsers = [
      // Ajoutez votre ID Telegram ici
      // Par exemple: 123456789
    ];
    
    // Stockage des achats personnalis√©s en attente
    this.pendingCustomBuy = {};
    
    this.setupCommands();
    this.setupHandlers();
    
    console.log('ü§ñ Bot Telegram 0x d√©marr√©!');
    console.log(`üëõ Wallet: ${CONFIG.TAKER_ADDRESS}`);
    console.log(`üåê Chain: Base (${CONFIG.CHAIN_ID})`);
  }

  setupCommands() {
    // D√©finir les commandes du bot
    this.bot.setMyCommands([
      { command: 'start', description: 'üöÄ D√©marrer le bot' },
      { command: 'help', description: '‚ùì Aide et commandes' },
      { command: 'balance', description: 'üíº Voir les soldes' },
      { command: 'sell', description: 'üí∞ Vendre un token' }
    ]);
  }

  setupHandlers() {
    // Commande /start
    this.bot.onText(/\/start/, (msg) => {
      this.handleStart(msg);
    });

    // Commande /help
    this.bot.onText(/\/help/, (msg) => {
      this.handleHelp(msg);
    });

    // Commande /balance
    this.bot.onText(/\/balance/, (msg) => {
      this.handleBalance(msg);
    });

    // Commande /sell
    this.bot.onText(/\/sell/, (msg) => {
      this.handleSell(msg);
    });

    // D√©tection automatique d'adresse de contrat
    this.bot.on('message', (msg) => {
      if (msg.text && !msg.text.startsWith('/')) {
        this.handleContractAddress(msg);
      }
    });

    // Gestion des callbacks (boutons)
    this.bot.on('callback_query', (callbackQuery) => {
      this.handleCallbackQuery(callbackQuery);
    });

    // Gestion des erreurs
    this.bot.on('polling_error', (error) => {
      console.error('‚ùå Erreur de polling:', error);
    });
  }

  // V√©rifier si l'utilisateur est autoris√©
  isAuthorized(userId) {
    return this.authorizedUsers.length === 0 || this.authorizedUsers.includes(userId);
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!this.isAuthorized(userId)) {
      return this.bot.sendMessage(chatId, '‚ùå Acc√®s non autoris√©');
    }

    const welcomeMessage = `
üöÄ **Bot de Trading Style Bananagun**

Collez simplement l'adresse d'un contrat pour voir toutes les informations et acheter rapidement !

**Utilisation:**
‚Ä¢ Collez une adresse de contrat ‚Üí Informations compl√®tes
‚Ä¢ /balance - Voir vos soldes
‚Ä¢ /help - Aide d√©taill√©e

**Votre wallet:** \`${CONFIG.TAKER_ADDRESS}\`
**Chain:** Base (${CONFIG.CHAIN_ID})

‚ö†Ô∏è **Attention:** Toutes les transactions sont r√©elles !
    `;

    this.bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
  }

  async handleHelp(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!this.isAuthorized(userId)) {
      return this.bot.sendMessage(chatId, '‚ùå Acc√®s non autoris√©');
    }

    const helpMessage = `
üìö **Guide d'utilisation - Style Bananagun**

**üéØ Utilisation principale:**
1. Collez l'adresse d'un contrat de token
2. Le bot affiche automatiquement toutes les infos
3. Cliquez sur les boutons pour acheter rapidement

**üíº Voir les soldes:**
\`/balance\` - Affiche vos soldes ETH et tokens

**üí∞ Vendre des tokens:**
\`/sell\` - Aide pour la vente de tokens
‚Ä¢ Apr√®s un achat : Interface de vente automatique
‚Ä¢ Collez une adresse : Boutons de vente si vous en poss√©dez
‚Ä¢ Boutons : Sell 10%, 25%, 50%, 100%

**üîç Informations affich√©es:**
‚Ä¢ Nom du token et adresse
‚Ä¢ DEX utilis√© (Uniswap V3)
‚Ä¢ Market Cap et Liquidit√©  
‚Ä¢ Taxes (Buy/Sell/Transfer)
‚Ä¢ V√©rification de s√©curit√©
‚Ä¢ Votre solde (si vous en poss√©dez)

**‚ö° Achats rapides:**
‚Ä¢ 0.1 ETH, 0.2 ETH, 0.5 ETH
‚Ä¢ Bouton X ETH pour montant personnalis√©

**üí∏ Ventes rapides:**
‚Ä¢ Sell 10%, 25%, 50%, 100%
‚Ä¢ Affichage du montant exact et ETH re√ßu
‚Ä¢ Solde restant apr√®s vente

**‚ö†Ô∏è S√©curit√©:**
‚Ä¢ V√©rifiez toujours les informations du token
‚Ä¢ Attention aux tokens √† faible liquidit√©
‚Ä¢ Les transactions sont irr√©versibles
    `;

    this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
  }

  async handleBalance(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!this.isAuthorized(userId)) {
      return this.bot.sendMessage(chatId, '‚ùå Acc√®s non autoris√©');
    }

    try {
      const loadingMsg = await this.bot.sendMessage(chatId, '‚è≥ R√©cup√©ration des soldes...');

      // R√©cup√©rer les soldes principaux
      const ethBalance = await this.swapManager.getTokenBalance(CONFIG.TOKENS.ETH);
      const usdcBalance = await this.swapManager.getTokenBalance(CONFIG.TOKENS.USDC);

      const balanceMessage = `
üíº **Vos soldes sur Base**

**ETH:** ${ethers.formatEther(ethBalance)} ETH
**USDC:** ${ethers.formatUnits(usdcBalance, 6)} USDC

**Wallet:** \`${CONFIG.TAKER_ADDRESS}\`

üîó [Voir sur BaseScan](https://basescan.org/address/${CONFIG.TAKER_ADDRESS})
      `;

      this.bot.editMessageText(balanceMessage, {
        chat_id: chatId,
        message_id: loadingMsg.message_id,
        parse_mode: 'Markdown'
      });

    } catch (error) {
      this.bot.sendMessage(chatId, `‚ùå Erreur: ${error.message}`);
    }
  }

  // Nouvelle fonction pour g√©rer la commande /sell
  async handleSell(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!this.isAuthorized(userId)) {
      return this.bot.sendMessage(chatId, '‚ùå Acc√®s non autoris√©');
    }

    const helpMessage = `
üí∞ **Commande de vente**

Pour vendre un token, vous avez plusieurs options :

1. **Apr√®s un achat** : L'interface de vente appara√Æt automatiquement
2. **Commande manuelle** : Collez l'adresse du token que vous voulez vendre
3. **Boutons de vente** : Utilisez les boutons Sell 10%, 25%, 50%, 100%

**Exemple d'utilisation :**
‚Ä¢ Collez l'adresse du token ‚Üí Interface de vente
‚Ä¢ Ou utilisez les boutons apr√®s un achat

‚ö†Ô∏è **Attention :** V√©rifiez toujours que vous avez des tokens √† vendre !
    `;

    this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
  }

  // Nouvelle fonction pour g√©rer les adresses de contrat coll√©es
  async handleContractAddress(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text.trim();

    if (!this.isAuthorized(userId)) {
      return this.bot.sendMessage(chatId, '‚ùå Acc√®s non autoris√©');
    }

    // V√©rifier si l'utilisateur attend de saisir un montant personnalis√©
    if (this.pendingCustomBuy && this.pendingCustomBuy[userId]) {
      const tokenAddress = this.pendingCustomBuy[userId];
      const amount = parseFloat(text);
      
      if (isNaN(amount) || amount <= 0) {
        return this.bot.sendMessage(chatId, '‚ùå **Montant invalide**\n\nVeuillez entrer un nombre valide (ex: 0.05)');
      }
      
      if (amount < 0.00001) {
        return this.bot.sendMessage(chatId, '‚ùå **Montant trop petit**\n\nMontant minimum: 0.00001 ETH\nEssayez avec un montant plus grand.');
      }
      
      // Supprimer la commande en attente
      delete this.pendingCustomBuy[userId];
      
      // Ex√©cuter l'achat avec le montant personnalis√©
      await this.executeBuy(chatId, null, tokenAddress, amount.toString());
      return;
    }

    // V√©rifier si c'est une adresse Ethereum valide
    if (!ethers.isAddress(text)) {
      return; // Ignorer si ce n'est pas une adresse valide
    }

    try {
      const loadingMsg = await this.bot.sendMessage(chatId, 'üîç Analyse du token en cours...');
      
      // R√©cup√©rer les informations du token
      const tokenInfo = await this.getTokenInfo(text);
      
      // Afficher l'interface Bananagun
      await this.displayTokenInterface(chatId, loadingMsg.message_id, tokenInfo);
      
    } catch (error) {
      console.error('Erreur lors de l\'analyse du token:', error);
      this.bot.sendMessage(chatId, `‚ùå Impossible d'analyser ce token: ${error.message}`);
    }
  }

  // Fonction pour r√©cup√©rer les informations du token
  async getTokenInfo(tokenAddress) {
    try {
      // Cr√©er une instance de contrat ERC20 pour r√©cup√©rer les informations de base
      const provider = new ethers.JsonRpcProvider(CONFIG.RPC_URL || 'https://mainnet.base.org');
      
      // ABI minimal pour ERC20
      const erc20ABI = [
        'function name() view returns (string)',
        'function symbol() view returns (string)',
        'function decimals() view returns (uint8)',
        'function totalSupply() view returns (uint256)',
        'function balanceOf(address) view returns (uint256)'
      ];
      
      const contract = new ethers.Contract(tokenAddress, erc20ABI, provider);
      
      // R√©cup√©rer les informations de base
      const [name, symbol, decimals, totalSupply] = await Promise.all([
        contract.name().catch(() => 'Unknown'),
        contract.symbol().catch(() => 'UNK'),
        contract.decimals().catch(() => 18),
        contract.totalSupply().catch(() => 0n)
      ]);

      // Obtenir le prix et la liquidit√© via 0x API
      let price = 0;
      let marketCap = 0;
      let liquidity = 0;
      let safetyCheck = '‚ùì V√©rification en cours';

      try {
        // Essayer d'obtenir le prix pour 1 ETH
        const priceData = await this.swapManager.zeroXApi.getPrice({
          sellToken: CONFIG.TOKENS.ETH,
          buyToken: tokenAddress,
          sellAmount: ethers.parseEther('1').toString(),
          taker: CONFIG.TAKER_ADDRESS
        });

        if (priceData && priceData.buyAmount) {
          try {
            const tokenAmount = ethers.formatUnits(priceData.buyAmount, decimals);
            price = parseFloat(tokenAmount);
            
            // V√©rifier si le prix est valide (pas trop petit)
            if (price > 0 && !isNaN(price) && price !== Infinity) {
              // Calculer la market cap approximative
              const totalSupplyFormatted = parseFloat(ethers.formatUnits(totalSupply, decimals));
              if (totalSupplyFormatted > 0 && !isNaN(totalSupplyFormatted)) {
                marketCap = (totalSupplyFormatted / price) * 3000; // Prix ETH approximatif
              }
            }
          } catch (formatError) {
            console.log('Erreur formatage prix:', formatError.message);
            price = 0;
          }
        }

        safetyCheck = '‚úÖ Liquide sur DEX';
      } catch (error) {
        console.log('Erreur prix:', error.message);
        safetyCheck = '‚ö†Ô∏è Faible liquidit√© d√©tect√©e';
      }

      // Informations sur les taxes (simul√©es pour l'exemple)
      const taxInfo = {
        buy: 0.00,
        sell: 0.00,
        transfer: 0.00
      };

      return {
        address: tokenAddress,
        name: name || 'Unknown Token',
        symbol: symbol || 'UNK',
        decimals,
        totalSupply,
        price,
        marketCap,
        liquidity,
        safetyCheck,
        taxInfo,
        dex: 'Uniswap V3'
      };

    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration des informations: ${error.message}`);
    }
  }

  // Afficher l'interface style Bananagun
  async displayTokenInterface(chatId, messageId, tokenInfo) {
    const formatAddress = (addr) => `${addr.slice(0, 6)}...${addr.slice(-4)}`;
    const formatNumber = (num) => {
      if (num >= 1000000) return `$${(num / 1000000).toFixed(2)}M`;
      if (num >= 1000) return `$${(num / 1000).toFixed(2)}K`;
      return `$${num.toFixed(2)}`;
    };

    // V√©rifier si l'utilisateur a des tokens de ce contrat
    let userBalance = 0n;
    let hasTokens = false;
    
    try {
      userBalance = await this.swapManager.getTokenBalance(tokenInfo.address);
      hasTokens = userBalance > 0n;
    } catch (error) {
      console.log('Erreur r√©cup√©ration solde:', error.message);
    }

    const message = `
ü™ô **Token:** ${tokenInfo.name}
\`${tokenInfo.address}\`

üîÑ **DEX:** ${tokenInfo.dex}
${tokenInfo.safetyCheck}

üìä **Market Cap:** ${formatNumber(tokenInfo.marketCap)}
üíß **Liquidity:** ${tokenInfo.liquidity.toFixed(4)} WETH
üìà **Contract balance:** ${formatAddress(tokenInfo.address)} (<0.001%)

${hasTokens ? `üí∞ **Votre solde:** ${ethers.formatUnits(userBalance, tokenInfo.decimals)} ${tokenInfo.symbol}` : ''}

${tokenInfo.safetyCheck.includes('Faible') ? '‚ö†Ô∏è **Ce token a une faible liquidit√©, v√©rifiez que le pool est correct avant de trader**' : ''}

üìã **Tax:** B: ${tokenInfo.taxInfo.buy.toFixed(2)}% ‚Ä¢ S: ${tokenInfo.taxInfo.sell.toFixed(2)}% ‚Ä¢ T: ${tokenInfo.taxInfo.transfer.toFixed(2)}%

**Contract**
‚Ä¢ Dexscreener ‚Ä¢ Dextools
    `;

    // Cr√©er le clavier avec les boutons d'achat
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí∞ Buy 0.1 ETH', callback_data: `buy_${tokenInfo.address}_0.1` },
          { text: 'üí∞ Buy 0.2 ETH', callback_data: `buy_${tokenInfo.address}_0.2` }
        ],
        [
          { text: 'üí∞ Buy 0.5 ETH', callback_data: `buy_${tokenInfo.address}_0.5` },
          { text: 'üí∞ Buy X ETH', callback_data: `buy_custom_${tokenInfo.address}` }
        ]
      ]
    };

    // Ajouter les boutons de vente si l'utilisateur a des tokens
    if (hasTokens) {
      keyboard.inline_keyboard.push([
        { text: 'üí∞ Sell 10%', callback_data: `sell_${tokenInfo.address}_10` },
        { text: 'üí∞ Sell 25%', callback_data: `sell_${tokenInfo.address}_25` }
      ]);
      keyboard.inline_keyboard.push([
        { text: 'üí∞ Sell 50%', callback_data: `sell_${tokenInfo.address}_50` },
        { text: 'üí∞ Sell 100%', callback_data: `sell_${tokenInfo.address}_100` }
      ]);
    }

    keyboard.inline_keyboard.push([
      { text: '‚ö° Slippage: Unlimited', callback_data: `slippage_${tokenInfo.address}` }
    ]);

    await this.bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // G√©rer les clics sur les boutons
  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (!this.isAuthorized(userId)) {
      return this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå Acc√®s non autoris√©' });
    }

    try {
      if (data.startsWith('buy_custom_')) {
        // Bouton "Buy X ETH" - demander le montant personnalis√©
        const tokenAddress = data.replace('buy_custom_', '');
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: 'üí¨ Quel montant en ETH ?' });
        
        // Stocker l'adresse du token pour la prochaine r√©ponse
        this.pendingCustomBuy = this.pendingCustomBuy || {};
        this.pendingCustomBuy[userId] = tokenAddress;
        
        await this.bot.sendMessage(chatId, `üí∞ **Quel montant en ETH voulez-vous utiliser pour acheter ce token ?**\n\nüìù Envoyez simplement le montant (ex: 0.05)\n\n‚ö†Ô∏è **Attention**: Cette transaction sera r√©elle !`);
        
      } else if (data.startsWith('buy_')) {
        // Boutons d'achat avec montant fixe (0.1, 0.2, 0.5 ETH)
        const parts = data.split('_');
        const tokenAddress = parts[1];
        const amount = parts[2];
        
        // Ex√©cuter l'achat
        await this.executeBuy(chatId, callbackQuery.id, tokenAddress, amount);
        
      } else if (data.startsWith('slippage_')) {
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ö° Slippage illimit√© activ√©' });
      } else if (data.startsWith('sell_')) {
        // Boutons de vente
        const parts = data.split('_');
        const tokenAddress = parts[1];
        const percentage = parts[2];
        
        // Ex√©cuter la vente
        await this.executeSell(chatId, callbackQuery.id, tokenAddress, percentage);
      } else if (data.startsWith('close_')) {
        // Bouton de fermeture
        const tokenAddress = data.replace('close_', '');
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå Fermeture' });
      }
    } catch (error) {
      console.error('Erreur callback:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå Erreur lors de l\'action' });
    }
  }

  // Ex√©cuter un achat
  async executeBuy(chatId, callbackQueryId, tokenAddress, amountEth) {
    try {
      if (callbackQueryId) {
        await this.bot.answerCallbackQuery(callbackQueryId, { text: `üöÄ Achat de ${amountEth} ETH en cours...` });
      }
      
      const loadingMsg = await this.bot.sendMessage(chatId, `‚è≥ Achat de ${amountEth} ETH du token en cours...\n\n‚ö° Pr√©paration de la transaction...`);

      // Validation des param√®tres
      const ethAmount = parseFloat(amountEth);
      if (isNaN(ethAmount) || ethAmount <= 0) {
        throw new Error('Montant ETH invalide');
      }

      // V√©rifier si le montant est trop petit (minimum 0.00001 ETH)
      if (ethAmount < 0.00001) {
        throw new Error('Montant trop petit (minimum: 0.00001 ETH)');
      }

      // Convertir en Wei en √©vitant la notation scientifique
      const sellAmount = ethers.parseEther(ethAmount.toFixed(18));

      // Mettre √† jour le message de chargement
      await this.bot.editMessageText(
        `‚è≥ Achat de ${amountEth} ETH du token en cours...\n\nüîç Obtention du meilleur prix...`,
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );

      // Ex√©cuter le swap
      const result = await this.swapManager.executeSwap({
        sellToken: CONFIG.TOKENS.ETH,
        buyToken: tokenAddress,
        sellAmount: sellAmount.toString(),
        slippagePercentage: '0.02'
      });

      // Message de succ√®s avec interface de vente
      const successMessage = `
‚úÖ **Achat r√©ussi !**

üí∞ **Achet√©:** ${amountEth} ETH
üîó **Transaction:** [Voir sur BaseScan](https://basescan.org/tx/${result.transactionHash})
‚è±Ô∏è **Temps:** ${result.performance?.total || 'N/A'}ms
üèóÔ∏è **Bloc:** ${result.blockNumber}
‚õΩ **Gas:** ${result.gasUsed}

üéâ **F√©licitations pour votre achat !**
üìä **Voulez-vous vendre une partie de vos tokens ?**
      `;

      // Interface de vente avec 4 boutons
      const sellKeyboard = {
        inline_keyboard: [
          [
            { text: 'üí∞ Sell 10%', callback_data: `sell_${tokenAddress}_10` },
            { text: 'üí∞ Sell 25%', callback_data: `sell_${tokenAddress}_25` }
          ],
          [
            { text: 'üí∞ Sell 50%', callback_data: `sell_${tokenAddress}_50` },
            { text: 'üí∞ Sell 100%', callback_data: `sell_${tokenAddress}_100` }
          ],
          [
            { text: '‚ùå Fermer', callback_data: `close_${tokenAddress}` }
          ]
        ]
      };

      await this.bot.editMessageText(successMessage, {
        chat_id: chatId,
        message_id: loadingMsg.message_id,
        parse_mode: 'Markdown',
        reply_markup: sellKeyboard
      });

    } catch (error) {
      console.error('Erreur lors de l\'achat:', error);
      
      const errorMessage = `
‚ùå **Erreur lors de l'achat**

**Erreur:** ${error.message.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&')}

üí° **Suggestions:**
‚Ä¢ V√©rifiez que vous avez assez d'ETH
‚Ä¢ V√©rifiez la liquidit√© du token
‚Ä¢ R√©essayez avec un montant plus petit
      `;

      await this.bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
    }
  }

  // Ex√©cuter une vente
  async executeSell(chatId, callbackQueryId, tokenAddress, percentage) {
    try {
      if (callbackQueryId) {
        await this.bot.answerCallbackQuery(callbackQueryId, { text: `üöÄ Vente de ${percentage}% en cours...` });
      }
      
      const loadingMsg = await this.bot.sendMessage(chatId, `‚è≥ Vente de ${percentage}% du token en cours...\n\n‚ö° Pr√©paration de la transaction...`);

      // R√©cup√©rer le solde du token
      const tokenBalance = await this.swapManager.getTokenBalance(tokenAddress);
      
      if (tokenBalance === 0n) {
        throw new Error('Aucun token √† vendre');
      }

      // Calculer le montant √† vendre
      const sellAmount = (tokenBalance * BigInt(percentage)) / 100n;
      
      if (sellAmount === 0n) {
        throw new Error('Montant √† vendre trop petit');
      }

      // R√©cup√©rer les informations du token pour l'affichage
      let tokenInfo = { symbol: 'TOKEN', decimals: 18 };
      try {
        tokenInfo = await this.getTokenInfo(tokenAddress);
      } catch (error) {
        console.log('Erreur r√©cup√©ration infos token:', error.message);
      }

      const sellAmountFormatted = ethers.formatUnits(sellAmount, tokenInfo.decimals);
      const balanceFormatted = ethers.formatUnits(tokenBalance, tokenInfo.decimals);

      // Mettre √† jour le message de chargement
      await this.bot.editMessageText(
        `‚è≥ Vente de ${percentage}% du token en cours...\n\nüí∞ **√Ä vendre:** ${sellAmountFormatted} ${tokenInfo.symbol}\nüíº **Solde total:** ${balanceFormatted} ${tokenInfo.symbol}\n\nüîç Obtention du meilleur prix...`,
        { chat_id: chatId, message_id: loadingMsg.message_id, parse_mode: 'Markdown' }
      );

      // Ex√©cuter le swap de vente
      const result = await this.swapManager.executeSwap({
        sellToken: tokenAddress,
        buyToken: CONFIG.TOKENS.ETH,
        sellAmount: sellAmount.toString(),
        slippagePercentage: '0.02'
      });

      // Calculer l'ETH re√ßu
      let ethReceived = 'N/A';
      try {
        if (result.buyAmount) {
          ethReceived = ethers.formatEther(result.buyAmount);
        }
      } catch (error) {
        console.log('Erreur calcul ETH re√ßu:', error.message);
      }

      // R√©cup√©rer le nouveau solde
      const newBalance = await this.swapManager.getTokenBalance(tokenAddress);
      const newBalanceFormatted = ethers.formatUnits(newBalance, tokenInfo.decimals);

      // Message de succ√®s
      const successMessage = `
‚úÖ **Vente r√©ussie !**

üí∞ **Vendu:** ${percentage}% (${sellAmountFormatted} ${tokenInfo.symbol})
üíé **ETH re√ßu:** ${ethReceived} ETH
üíº **Solde restant:** ${newBalanceFormatted} ${tokenInfo.symbol}

üîó **Transaction:** [Voir sur BaseScan](https://basescan.org/tx/${result.transactionHash})
‚è±Ô∏è **Temps:** ${result.performance?.total || 'N/A'}ms
üèóÔ∏è **Bloc:** ${result.blockNumber}
‚õΩ **Gas:** ${result.gasUsed}

üéâ **Vente effectu√©e avec succ√®s !**
      `;

      await this.bot.editMessageText(successMessage, {
        chat_id: chatId,
        message_id: loadingMsg.message_id,
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('Erreur lors de la vente:', error);
      
      const errorMessage = `
‚ùå **Erreur lors de la vente**

**Erreur:** ${error.message.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&')}

üí° **Suggestions:**
‚Ä¢ V√©rifiez que vous avez des tokens √† vendre
‚Ä¢ V√©rifiez la liquidit√© du token
‚Ä¢ R√©essayez avec un pourcentage plus petit
      `;

      await this.bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
    }
  }
}

// Fonction pour d√©marrer le bot
export function startTelegramBot(telegramToken) {
  return new ZeroXTelegramBot(telegramToken);
} 